// Code generated by MockGen. DO NOT EDIT.
// Source: proposals.go
//
// Generated by this command:
//
//	mockgen -source=proposals.go -destination=proposals_mock.go -package=emitter
//

// Package emitter is a generated GoMock package.
package emitter

import (
	context "context"
	reflect "reflect"
	time "time"

	scheduler "github.com/0xsoniclabs/sonic/gossip/emitter/scheduler"
	inter "github.com/0xsoniclabs/sonic/inter"
	opera "github.com/0xsoniclabs/sonic/opera"
	hash "github.com/Fantom-foundation/lachesis-base/hash"
	idx "github.com/Fantom-foundation/lachesis-base/inter/idx"
	txpool "github.com/ethereum/go-ethereum/core/txpool"
	types "github.com/ethereum/go-ethereum/core/types"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockworldReader is a mock of worldReader interface.
type MockworldReader struct {
	ctrl     *gomock.Controller
	recorder *MockworldReaderMockRecorder
}

// MockworldReaderMockRecorder is the mock recorder for MockworldReader.
type MockworldReaderMockRecorder struct {
	mock *MockworldReader
}

// NewMockworldReader creates a new mock instance.
func NewMockworldReader(ctrl *gomock.Controller) *MockworldReader {
	mock := &MockworldReader{ctrl: ctrl}
	mock.recorder = &MockworldReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworldReader) EXPECT() *MockworldReaderMockRecorder {
	return m.recorder
}

// GetEpochStartBlock mocks base method.
func (m *MockworldReader) GetEpochStartBlock(arg0 idx.Epoch) idx.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochStartBlock", arg0)
	ret0, _ := ret[0].(idx.Block)
	return ret0
}

// GetEpochStartBlock indicates an expected call of GetEpochStartBlock.
func (mr *MockworldReaderMockRecorder) GetEpochStartBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochStartBlock", reflect.TypeOf((*MockworldReader)(nil).GetEpochStartBlock), arg0)
}

// GetEventPayload mocks base method.
func (m *MockworldReader) GetEventPayload(arg0 hash.Event) inter.Payload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventPayload", arg0)
	ret0, _ := ret[0].(inter.Payload)
	return ret0
}

// GetEventPayload indicates an expected call of GetEventPayload.
func (mr *MockworldReaderMockRecorder) GetEventPayload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventPayload", reflect.TypeOf((*MockworldReader)(nil).GetEventPayload), arg0)
}

// GetLatestBlock mocks base method.
func (m *MockworldReader) GetLatestBlock() *inter.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*inter.Block)
	return ret0
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockworldReaderMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockworldReader)(nil).GetLatestBlock))
}

// GetRules mocks base method.
func (m *MockworldReader) GetRules() opera.Rules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRules")
	ret0, _ := ret[0].(opera.Rules)
	return ret0
}

// GetRules indicates an expected call of GetRules.
func (mr *MockworldReaderMockRecorder) GetRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRules", reflect.TypeOf((*MockworldReader)(nil).GetRules))
}

// MocktxScheduler is a mock of txScheduler interface.
type MocktxScheduler struct {
	ctrl     *gomock.Controller
	recorder *MocktxSchedulerMockRecorder
}

// MocktxSchedulerMockRecorder is the mock recorder for MocktxScheduler.
type MocktxSchedulerMockRecorder struct {
	mock *MocktxScheduler
}

// NewMocktxScheduler creates a new mock instance.
func NewMocktxScheduler(ctrl *gomock.Controller) *MocktxScheduler {
	mock := &MocktxScheduler{ctrl: ctrl}
	mock.recorder = &MocktxSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxScheduler) EXPECT() *MocktxSchedulerMockRecorder {
	return m.recorder
}

// Schedule mocks base method.
func (m *MocktxScheduler) Schedule(arg0 context.Context, arg1 *scheduler.BlockInfo, arg2 scheduler.PrioritizedTransactions, arg3 uint64) []*types.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*types.Transaction)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MocktxSchedulerMockRecorder) Schedule(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MocktxScheduler)(nil).Schedule), arg0, arg1, arg2, arg3)
}

// MocktimerMetric is a mock of timerMetric interface.
type MocktimerMetric struct {
	ctrl     *gomock.Controller
	recorder *MocktimerMetricMockRecorder
}

// MocktimerMetricMockRecorder is the mock recorder for MocktimerMetric.
type MocktimerMetricMockRecorder struct {
	mock *MocktimerMetric
}

// NewMocktimerMetric creates a new mock instance.
func NewMocktimerMetric(ctrl *gomock.Controller) *MocktimerMetric {
	mock := &MocktimerMetric{ctrl: ctrl}
	mock.recorder = &MocktimerMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimerMetric) EXPECT() *MocktimerMetricMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MocktimerMetric) Update(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MocktimerMetricMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MocktimerMetric)(nil).Update), arg0)
}

// MockcounterMetric is a mock of counterMetric interface.
type MockcounterMetric struct {
	ctrl     *gomock.Controller
	recorder *MockcounterMetricMockRecorder
}

// MockcounterMetricMockRecorder is the mock recorder for MockcounterMetric.
type MockcounterMetricMockRecorder struct {
	mock *MockcounterMetric
}

// NewMockcounterMetric creates a new mock instance.
func NewMockcounterMetric(ctrl *gomock.Controller) *MockcounterMetric {
	mock := &MockcounterMetric{ctrl: ctrl}
	mock.recorder = &MockcounterMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcounterMetric) EXPECT() *MockcounterMetricMockRecorder {
	return m.recorder
}

// Inc mocks base method.
func (m *MockcounterMetric) Inc(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inc", arg0)
}

// Inc indicates an expected call of Inc.
func (mr *MockcounterMetricMockRecorder) Inc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockcounterMetric)(nil).Inc), arg0)
}

// MocktransactionIndex is a mock of transactionIndex interface.
type MocktransactionIndex struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionIndexMockRecorder
}

// MocktransactionIndexMockRecorder is the mock recorder for MocktransactionIndex.
type MocktransactionIndexMockRecorder struct {
	mock *MocktransactionIndex
}

// NewMocktransactionIndex creates a new mock instance.
func NewMocktransactionIndex(ctrl *gomock.Controller) *MocktransactionIndex {
	mock := &MocktransactionIndex{ctrl: ctrl}
	mock.recorder = &MocktransactionIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionIndex) EXPECT() *MocktransactionIndexMockRecorder {
	return m.recorder
}

// Peek mocks base method.
func (m *MocktransactionIndex) Peek() (*txpool.LazyTransaction, *uint256.Int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(*txpool.LazyTransaction)
	ret1, _ := ret[1].(*uint256.Int)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MocktransactionIndexMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MocktransactionIndex)(nil).Peek))
}

// Pop mocks base method.
func (m *MocktransactionIndex) Pop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pop")
}

// Pop indicates an expected call of Pop.
func (mr *MocktransactionIndexMockRecorder) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MocktransactionIndex)(nil).Pop))
}

// Shift mocks base method.
func (m *MocktransactionIndex) Shift() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shift")
}

// Shift indicates an expected call of Shift.
func (mr *MocktransactionIndexMockRecorder) Shift() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shift", reflect.TypeOf((*MocktransactionIndex)(nil).Shift))
}
